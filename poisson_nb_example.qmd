---
title: "Poisson example"
format: html
---

```{r setup}
library(SBC)
library(ggplot2)
library(calibrationband)
library(dplyr)
library(magrittr)

options(SBC.min_chunk_size = 100)

cache_dir <- here::here("cache")
if(!dir.exists(cache_dir)) {
  dir.create(cache_dir)
}

devtools::load_all()
theme_set(theme_minimal())

n_histories <- 100
```

```{r cluster}
setup_cluster()
options(SBC.generator_chunk_size = Inf)
```


```{r}
chosen_mean <- 3
chosen_phi <- 5

sim_poisson_nb <- function(n, mean = chosen_mean, phi = chosen_phi) {
  model <- rbinom(1, size = 1, prob = 0.5)
  if(model == 0) {
    y <- rpois(n = n, lambda = mean)
  } else {
    y <- rnbinom(n = n, mu = mean, size = phi)
  }
  list(
    variables = list(model = model),
    generated = list(y = y),
    var_attributes = var_attributes(
      model = c(binary_var_attribute(), possibly_constant_var_attribute())
    )
  )
}

set.seed(23225)
ds_pnb <- generate_datasets(SBC_generator_function(sim_poisson_nb, n = 25), n_sims = 10000)
```


```{r}
SBC_backend_pnb_example <- function(n_draws, mean = chosen_mean, phi = chosen_phi, ignore_prop = 0,bias = 0, sd = 0) {
  structure(list(
    mean = mean,
    phi = phi,
    bias = bias,
    sd = sd,
    ignore_prop = ignore_prop,
    n_draws = n_draws
  ), class = "SBC_backend_pnb_example")
}

SBC_fit.SBC_backend_pnb_example <- function(backend,generated,cores) {
  ignore_num <- ceiling(backend$ignore_prop * length(generated$y))
  if(ignore_num == length(generated$y)) {
    y <- numeric(0)
  } else {
    y <- generated$y[1 : (length(generated$y) - ignore_num)]
  }
  log_bf10_correct <- 
    sum(dnbinom(y, mu = backend$mean, size = backend$phi, log = TRUE)) -
    sum(dpois(y, lambda = backend$mean, log = TRUE))
  
  log_bf10 <- log_bf10_correct + backend$bias + rnorm(1, sd = backend$sd)
  pm1 <- plogis(log_bf10)
  
  SBC_fit_bf_examples(pm1, backend$n_draws)
}

SBC_backend_iid_draws.SBC_backend_pnb_example <- function(...) {
  TRUE
}


SBC_fit_bf_examples <- function(pm1, n_draws) {
  structure(list(pm1 = pm1, n_draws = n_draws), class = "SBC_fit_bf_examples")
}

SBC_fit_to_draws_matrix.SBC_fit_bf_examples <- function(fit) {
  posterior::draws_matrix(model = rbinom(fit$n_draws, size = 1, prob = fit$pm1))
}

binary_to_cdf <- function(variables, prob1, simulated_value) {
  data.frame(variable = variables,
             cdf_low = dplyr::if_else(simulated_value == 0, 0, prob1),
             cdf_high = dplyr::if_else(simulated_value == 0, prob1, 1))
}

SBC_posterior_cdf.SBC_fit_bf_examples <- function(fit, variables) {
  binary_to_cdf("model", fit$pm1, variables["model"])
}


poisson_nb_globals <- c(
  "SBC_backend_iid_draws.SBC_backend_pnb_example",
  "SBC_fit.SBC_backend_pnb_example",
  "SBC_fit_bf_examples",
  "SBC_fit_to_draws_matrix.SBC_fit_bf_examples",
  "binary_to_cdf",
  "SBC_posterior_cdf.SBC_fit_bf_examples",
  "chosen_mean",
  "chosen_phi"
)

dquants_pnb <- derived_quantities(
  var_y = dplyr::if_else(model == 1, var(y), mean(y)), #Poisson implies mean == variance
  log_lik = dplyr::if_else(model == 1,  
                           sum(dnbinom(y, mu = chosen_mean, size = chosen_phi, log = TRUE)), 
                           sum(dpois(y, lambda = chosen_mean, log = TRUE)))
)


```

The specific parameters were chosen so that they provide a broad range of posterior probabilities.


## Correct

```{r}
res_pnb_correct <- compute_SBC(ds_pnb, SBC_backend_pnb_example(100),
                               dquants = dquants_pnb,
                               globals = poisson_nb_globals,
                               keep_fits = FALSE,
                               cache_mode = "results", cache_location = file.path(cache_dir, "poisson_nb_correct.rds"))

```


```{r}
binary_probabilities_from_stats(res_pnb_correct$stats) %>% pull(prob) %>% hist()
```

```{r}
plot_ecdf_diff(res_pnb_correct)
plot_binary_calibration_diff(res_pnb_correct$stats, method = "round")
```

```{r}
hist_correct <- compute_bootstrapped_histories(res_pnb_correct$stats, history_length = 100, n_histories = 100,
                                            compute_log_gamma_history)
plot_log_gamma_histories(hist_correct)
```

```{r}
bp_correct <- binary_probabilities_from_stats(res_pnb_correct$stats)
hist_correct_okada <- compute_bootstrapped_histories(bp_correct, history_length = 100, n_histories = 100, step = hist_step_correct,
                                                           compute_okada_history, min_sim_id = 20)

plot_log_p_histories(hist_correct_okada, "Fractional Good check")
```


## Ignore all


```{r}
res_pnb_ignore_all <-  compute_SBC(ds_pnb[1:1000], SBC_backend_pnb_example(100, ignore_prop = 1),
                               dquants = dquants_pnb,
                               keep_fits = FALSE,
                               globals = poisson_nb_globals,
                               cache_mode = "results", cache_location = file.path(cache_dir, "poisson_nb_ignore_all.rds"))

plot_ecdf_diff(res_pnb_ignore_all)
plot_binary_calibration_diff(res_pnb_ignore_all$stats, method = "round")

```




```{r}
hist_length_ignore_all <- 100
hist_step_ignore_all <- 1
hist_pnb_ignore_all <- compute_bootstrapped_histories(res_pnb_ignore_all$stats, history_length = hist_length_ignore_all, n_histories = 100,
                                                       step = hist_step_ignore_all,
                                            compute_log_gamma_history)

bp_pnb_ignore_all <- binary_probabilities_from_stats(res_pnb_ignore_all$stats)

hist_pnb_ignore_all_ttest <- compute_bootstrapped_histories(bp_pnb_ignore_all, history_length = hist_length_ignore_all, n_histories = 100, step = hist_step_ignore_all,
                                            compute_ttest_history, min_sim_id = 10)


hist_pnb_ignore_all_miscalib <- compute_bootstrapped_histories(bp_pnb_ignore_all, history_length = hist_length_ignore_all, n_histories = 100, step = hist_step_ignore_all,
                                            compute_miscalibration_history)

plot_log_gamma_histories(hist_pnb_ignore_all)
plot_log_p_histories(hist_pnb_ignore_all_ttest, "ttest")
plot_log_p_histories(hist_pnb_ignore_all_miscalib, "Miscalibration resampling")

save_histories("pnb_ignore_all",
               log_gamma = hist_pnb_ignore_all,
               ttest = hist_pnb_ignore_all_ttest,
               miscalibration = hist_pnb_ignore_all_miscalib)

```

## Ignore half

```{r}
res_pnb_ignore_half <-  compute_SBC(ds_pnb, SBC_backend_pnb_example(100, ignore_prop = 0.5),
                               dquants = dquants_pnb,
                               globals = poisson_nb_globals,
                               cache_mode = "results", cache_location = file.path(cache_dir, "poisson_nb_ignore_half.rds"))

```


```{r}
hist_length_ignore_half <- 1000
hist_step_ignore_half <- 10
hist_pnb_ignore_half <- compute_bootstrapped_histories(res_pnb_ignore_half$stats, history_length = hist_length_ignore_half, n_histories = 100,
                                                       step = hist_step_ignore_half,
                                            compute_log_gamma_history)

bp_pnb_ignore_half <- binary_probabilities_from_stats(res_pnb_ignore_half$stats)

hist_pnb_ignore_half_ttest <- compute_bootstrapped_histories(bp_pnb_ignore_half, history_length = hist_length_ignore_half, n_histories = 100, step = hist_step_ignore_half,
                                            compute_ttest_history, min_sim_id = 10)


hist_pnb_ignore_half_miscalib <- compute_bootstrapped_histories(bp_pnb_ignore_half, history_length = hist_length_ignore_half, n_histories = 100, step = hist_step_ignore_half,
                                            compute_miscalibration_history)

plot_log_gamma_histories(hist_pnb_ignore_half)
plot_log_p_histories(hist_pnb_ignore_half_ttest, "ttest")
plot_log_p_histories(hist_pnb_ignore_half_miscalib, "Miscalibration resampling")

save_histories("pnb_ignore_half",
               log_gamma = hist_pnb_ignore_half,
               ttest = hist_pnb_ignore_half_ttest,
               miscalibration = hist_pnb_ignore_half_miscalib)

```



## Add variance

```{r}
res_pnb_vari <-  compute_SBC(ds_pnb, SBC_backend_pnb_example(100, sd = 2),
                               dquants = dquants_pnb,
                               globals = poisson_nb_globals,
                               cache_mode = "results", cache_location = file.path(cache_dir, "poisson_nb_vari.rds"))

plot_ecdf_diff(res_pnb_vari)
plot_binary_calibration_diff(res_pnb_vari$stats, method = "round")
```


```{r}
hist_length_vari <- 1000
hist_step_vari <- 10
hist_pnb_vari <- compute_bootstrapped_histories(res_pnb_vari$stats, history_length = hist_length_vari, n_histories = 100,
                                                       step = hist_step_vari,
                                            compute_log_gamma_history)

bp_pnb_vari <- binary_probabilities_from_stats(res_pnb_vari$stats)

hist_pnb_vari_ttest <- compute_bootstrapped_histories(bp_pnb_vari, history_length = hist_length_vari, n_histories = 100, step = hist_step_vari,
                                            compute_ttest_history, min_sim_id = 10)



hist_pnb_vari_brier <- compute_bootstrapped_histories(bp_pnb_vari, history_length = hist_length_vari, n_histories = 100, step = hist_step_vari,
                                            compute_brier_history, min_sim_id = 10)


hist_pnb_vari_miscalib <- compute_bootstrapped_histories(bp_pnb_vari, history_length = hist_length_vari, n_histories = 100, step = hist_step_vari,
                                            compute_miscalibration_history)


hist_pnb_vari_okada <- compute_bootstrapped_histories(bp_pnb_vari, history_length = hist_length_vari, n_histories = 100, step = hist_step_vari,
                                            compute_okada_history)


plot_log_gamma_histories(hist_pnb_vari)
plot_log_p_histories(hist_pnb_vari_ttest, "ttest")
plot_log_p_histories(hist_pnb_vari_brier, "Brier resampling")
plot_log_p_histories(hist_pnb_vari_miscalib, "Miscalibration resampling")
plot_log_p_histories(hist_pnb_vari_okada, "Fractional Good check")

save_histories("pnb_vari",
               log_gamma = hist_pnb_vari,
               ttest = hist_pnb_vari_ttest,
               brier = hist_pnb_vari_brier,
               miscalibration = hist_pnb_vari_miscalib,
               okada = hist_pnb_vari_okada)

```


## Add bias

```{r}
res_pnb_bias <-  compute_SBC(ds_pnb[1:1000], SBC_backend_pnb_example(100, bias = 2),
                               dquants = dquants_pnb,
                               globals = poisson_nb_globals,
                               cache_mode = "results", cache_location = file.path(cache_dir, "poisson_nb_bias.rds"))

plot_ecdf_diff(res_pnb_bias)
plot_binary_calibration_diff(res_pnb_bias$stats, method = "round")
```
```{r}
hist_length_bias <- 200
hist_step_bias <- 5
hist_pnb_bias <- compute_bootstrapped_histories(res_pnb_bias$stats, history_length = hist_length_bias, n_histories = 100,
                                                       step = hist_step_bias,
                                            compute_log_gamma_history)

bp_pnb_bias <- binary_probabilities_from_stats(res_pnb_bias$stats)

hist_pnb_bias_ttest <- compute_bootstrapped_histories(bp_pnb_bias, history_length = hist_length_bias, n_histories = 100, step = hist_step_bias,
                                            compute_ttest_history)


hist_pnb_bias_brier <- compute_bootstrapped_histories(bp_pnb_bias, history_length = hist_length_bias, n_histories = 100, step = hist_step_bias,
                                            compute_brier_history, min_sim_id = 10)


hist_pnb_bias_miscalib <- compute_bootstrapped_histories(bp_pnb_bias, history_length = hist_length_bias, n_histories = 100, step = hist_step_bias,
                                            compute_miscalibration_history)


hist_pnb_bias_okada <- compute_bootstrapped_histories(bp_pnb_bias, history_length = hist_length_bias, n_histories = 100, step = hist_step_bias,
                                            compute_okada_history)

plot_log_gamma_histories(hist_pnb_bias)
plot_log_p_histories(hist_pnb_bias_ttest, "ttest")
plot_log_p_histories(hist_pnb_bias_brier, "Brier resampling")
plot_log_p_histories(hist_pnb_bias_miscalib, "Miscalibration resampling")
plot_log_p_histories(hist_pnb_bias_okada, "Fractional Good check")

save_histories("pnb_bias",
               log_gamma = hist_pnb_bias,
               ttest = hist_pnb_bias_ttest,
               brier = hist_pnb_bias_brier,
               miscalibration = hist_pnb_bias_miscalib,
               okada = hist_pnb_bias_okada)


```


## Add bias and variance

```{r}
res_pnb_bias_vari <-  compute_SBC(ds_pnb, SBC_backend_pnb_example(100, bias = 1, sd = 1),
                               dquants = dquants_pnb,
                               globals = poisson_nb_globals,
                               cache_mode = "results", cache_location = file.path(cache_dir, "poisson_nb_bias_vari.rds"))

plot_ecdf_diff(res_pnb_bias_vari)
my_reliability_diag(binary_probabilities_from_stats(res_pnb_bias_vari$stats))
```





```{r}
hist_length_bias_vari <- 500
hist_step_bias_vari <- 10
hist_pnb_bias_vari <- compute_bootstrapped_histories(res_pnb_bias_vari$stats, history_length = hist_length_bias_vari, n_histories = 100,
                                                       step = hist_step_bias_vari,
                                            compute_log_gamma_history)

bp_pnb_bias_vari <- binary_probabilities_from_stats(res_pnb_bias_vari$stats)

hist_pnb_bias_vari_ttest <- compute_bootstrapped_histories(bp_pnb_bias_vari, history_length = hist_length_bias_vari, n_histories = 100, step = hist_step_bias_vari,
                                            compute_ttest_history)


hist_pnb_bias_vari_brier <- compute_bootstrapped_histories(bp_pnb_bias_vari, history_length = hist_length_bias_vari, n_histories = 100, step = hist_step_bias_vari,
                                            compute_brier_history, min_sim_id = 10)


hist_pnb_bias_vari_miscalib <- compute_bootstrapped_histories(bp_pnb_bias_vari, history_length = hist_length_bias_vari, n_histories = 100, step = hist_step_bias_vari,
                                            compute_miscalibration_history)

hist_pnb_bias_vari_okada <- compute_bootstrapped_histories(bp_pnb_bias_vari, history_length = hist_length_bias_vari, n_histories = 100, step = hist_step_bias_vari,
                                            compute_okada_history)

plot_log_gamma_histories(hist_pnb_bias_vari)
plot_log_p_histories(hist_pnb_bias_vari_ttest, "ttest")
plot_log_p_histories(hist_pnb_bias_vari_brier, "Brier resampling")
plot_log_p_histories(hist_pnb_bias_vari_miscalib, "Miscalibration resampling")
plot_log_p_histories(hist_pnb_bias_vari_okada, "Fractional Good check")

save_histories("pnb_bias_vari",
               log_gamma = hist_pnb_bias_vari,
               ttest = hist_pnb_bias_vari_ttest,
               brier = hist_pnb_bias_vari_brier,
               miscalibration = hist_pnb_bias_vari_miscalib,
               okada = hist_pnb_bias_vari_okada)


```

