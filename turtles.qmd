---
title: "Turtles"
format: html
---

Let's setup the environment (bridgesampling currently works only with rstan):

```{r setup, message=FALSE,warning=FALSE, results="hide"}
library(SBC)
library(ggplot2)
library(bridgesampling)
library(dplyr)
library(tidyr)
library(calibrationband)

use_cmdstanr <- FALSE
library(rstan)
rstan_options(auto_write = TRUE)

library(future)


cache_dir <- here::here("cache")
if(!dir.exists(cache_dir)) {
  dir.create(cache_dir)
}

do_tests <- FALSE

theme_set(theme_minimal())
devtools::load_all()
```

```{r cluster}
setup_cluster(max_server_workers = 110)
```



There's a weird $(1 + \sigma)^{-2}$ prior on sigma, sampling with an inverse CDF scheme:

```{r}

r_inv_one_plus_sq <- function(n) {
  p <- runif(n)
  return(p / (1 - p))
}

samps <- r_inv_one_plus_sq(1e6)
xlim <- 100

samps <- samps[samps < xlim]

x_vals <- seq(1e-2, max(xlim), length.out = 200)

pdf_df <- data.frame(x = x_vals, y = (1 + x_vals)^-2)



p <- ggplot(data.frame(x = samps), aes(x)) + geom_density(bounds = c(0, xlim)) + 
  geom_line(data = pdf_df, aes(y = y), color = "blue") + coord_cartesian(xlim = c(0, xlim))
p
p + scale_y_log10()

```



```{r}
x_vals <- seq(0,10, length.out = 100)
pdf_df <- data.frame(x = x_vals, y = (1 + x_vals)^-2)
chisq_df <- data.frame(x = x_vals, y = dchisq(x_vals,df = 1))
ggplot() + aes(x = x ,y = y) + 
  geom_line(data = pdf_df, aes(y = y), color = "blue") + 
  geom_line(data = chisq_df, aes(y = y), color = "red") 

ggplot() + aes(x = x ,y = y) + geom_line(data = pdf_df, aes(y = y), color = "blue") + 
  geom_line(data = chisq_df, aes(y = y), color = "red") 
```


```{r, comment = ""}
cat(readLines("stan/turtles_H0.stan"), sep = "\n")
```

```{r compile-models}
m_H0 <- stan_model("stan/turtles_H0.stan")
m_H1 <- stan_model("stan/turtles_H1.stan")
m_H1_chisq <- stan_model("stan/turtles_H1_chisq.stan")
m_H1_norm <- stan_model("stan/turtles_H1_norm.stan")
```

## Simulator

```{r}
data("turtles", package = "bridgesampling")
force(turtles)

gen_globals <- c("r_inv_one_plus_sq", "turtles")

sim_turtles <- function(model, N = NULL, C = NULL, sigma2_prior = "default", prior_width = sqrt(10.0), link = "probit") {
  if(is.null(N)) {
    stopifnot(is.null(C))
    fixed_predictors <- TRUE
    
    N <- nrow(turtles)
    C <- max(turtles$clutch)
    clutch <- turtles$clutch
    x <- turtles$x
  } else {
    stopifnot(!is.null(C))
    stopifnot(N >= 3 * C)
    fixed_predictors <- FALSE
  }

  ## Rejection sampling to avoid low-variability datasets
  for(i in 1:200) {

    alpha0_raw <- rnorm(1) 
    alpha1_raw <- rnorm(1) 
    alpha0 <- prior_width * alpha0_raw
    alpha1 <- prior_width * alpha1_raw
    
    if(!fixed_predictors) {
      clutch <- rep(1:C, length.out = N)

      x <- rnorm(N) / 3  
    }
    
    
    log_lik_shared <- dnorm(alpha0_raw, log = TRUE) +
      dnorm(alpha1_raw, log = TRUE)
    
    if(model == 0) {
      predictor <- alpha0 + alpha1 * x
      log_lik_spec <- 0
    } else {
      if(sigma2_prior == "default") {
        sigma2_clutch <- r_inv_one_plus_sq(1)
        sigma_clutch <- sqrt(sigma2_clutch)      
        
        sigma2_log_lik <- log(sigma2_clutch)  +# Jacobian
          (- 2 * log1p(sigma2_clutch))
      } else if(sigma2_prior == "chisq") {
        sigma2_clutch <- rchisq(1, df = 1)
        sigma_clutch <- sqrt(sigma2_clutch)      
        
        sigma2_log_lik <- log(sigma2_clutch)  +# Jacobian
          dchisq(sigma2_clutch, df = 1, log = TRUE)
      } else if(sigma2_prior == "sqrt_norm") {
        sigma_clutch <- abs(rnorm(1, sd = 1))
        
        sigma2_log_lik <- log(sigma_clutch)  +# Jacobian
          log(2) + dnorm(sigma_clutch, sd = 1, log = TRUE)
      } else {
        stop("Invalid sigma2_prior")
      }

      b_clutch_raw <- rnorm(C)
      b_clutch <- b_clutch_raw * sigma_clutch
      
      predictor <- alpha0 + alpha1 * x + b_clutch[clutch]
      
      log_lik_spec <- 
        sigma2_log_lik +
        sum(dnorm(b_clutch_raw, log = TRUE))
    }
    
    if(link == "probit") {
      prob <- pnorm(predictor)
      link_int <- 0
    } else if(link == "logit") {
      prob <- plogis(predictor) 
      link_int <- 1
    } else {
      stop("Invalid link")
    }
    #
    y <- rbinom(N, p = prob, size = 1)
    if(mean(y == 0) < 0.9 && mean(y == 1) < 0.9) {
      break
    }
  }
  if(i >= 200) {
    warning("Could not generate nice dataset")
  }
  
  log_lik_predictor <- sum(dbinom(y, size = 1, p = prob, log = TRUE))
  
  variables <- list(
      alpha0 = alpha0,
      alpha1 = alpha1,
      lp__ = log_lik_shared + log_lik_spec + log_lik_predictor
    )
  
  if(model == 1) {
    variables$sigma <- sigma_clutch
    variables$b <- b_clutch
  } 

  list(
    generated = list(
      N = N,
      y = y,
      x = x,
      C = C,
      clutch = clutch,
      prior_width = prior_width,
      link = link_int
    ),
    variables = variables
  )
}
```


## Test individual models

```{r test1}
if(do_tests) {
set.seed(9654224)
  N <- NULL
  C <- NULL
  ds_test_1 <- generate_datasets(SBC_generator_function(sim_turtles, N = N, C = C, model = 1, future.globals = gen_globals), n_sims = 4000)
  backend_H1 <- SBC_backend_rstan_sample(m_H1, init = 0, control = list(adapt_delta = 0.9))
  res_test1 <- compute_SBC(ds_test_1, backend_H1, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, paste0("SBC_turtles_H1_N", N, "_C",C,"_", length(ds_test_1), ".rds")))
  
  plot_ecdf_diff(res_test1, combine_variables = combine_array_elements)
}
```

```{r}
ysds <- purrr::map_dbl(ds_test_1$generated, \(x) sd(x$y))
hist(ysds)

x <- ds_test_1$generated[[1]]
df <- data.frame(x = x$x, y = x$y, clutch = x$clutch)
glm(y ~ x + (1 | clutch), family = "binomial", data = df)
ysds <- purrr::map_dbl(ds_test_1$generated, \(x) sd(x$y))

select <- ysds < 0.45
plot_ecdf_diff(res_test1[select], combine_variables = combine_array_elements)
plot_ecdf_diff(res_test1[!select], combine_variables = combine_array_elements)
```


```{r test0}
if(do_tests) {
set.seed(5685432)
  N <- NULL
  C <- NULL
  ds_test_0 <- generate_datasets(SBC_generator_function(sim_turtles, N = N, C = C, model = 0, future.globals = gen_globals), n_sims = 4000)
  backend_H0 <- SBC_backend_rstan_sample(m_H0, init = 0, control = list(adapt_delta = 0.9))
  res_test0 <- compute_SBC(ds_test_0, backend_H0, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, paste0("SBC_turtles_H0_N", N, "_C",C,"_", length(ds_test_0), ".rds")))
  
  plot_ecdf_diff(res_test0, combine_variables = combine_array_elements)
}
```


```{r shared-config}
N <- NULL
C <- NULL
N_sims <- 2000
iter <- 15500
warmup <- 500
init <- 0
```


## Original prior

```{r simulateds}

set.seed(3245822)
ds_turtles_m0 <- generate_datasets(SBC_generator_function(sim_turtles, model = 0, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_m1 <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)

set.seed(68234245)
ds_turtles <- SBC_datasets_for_bf(ds_turtles_m0, ds_turtles_m1)
```

```{r turtles1}
backend_turtles <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter, warmup = warmup, init = init),
  SBC_backend_rstan_sample(m_H1, iter = iter, warmup = warmup, init = init)
)
res_turtles <- compute_SBC(ds_turtles, backend_turtles, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, "turtles_1.rds"))
```

```{r}
res_turtles$errors[!purrr::map_lgl(res_turtles$errors, is.null)] %>% purrr::map_chr(as.character) %>% unique()
```


```{r}
res_turtles$stats
```



```{r}
plot_ecdf_diff(res_turtles, combine_variables = combine_array_elements)
plot_rank_hist(res_turtles, variables = "model", bins = 20)

```

```{r}
bp_turtles <- binary_probabilities_from_stats(res_turtles$stats)
t.test(bp_turtles$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles$prob, bp_turtles$simulated_value)
my_reliability_diag(bp_turtles)
```
Just those without error in BF

```{r}
table(res_turtles$backend_diagnostics$bs_error_H1)
res_turtles$backend_diagnostics %>% mutate(errors = paste0("H0: ", bs_error_H0, ", H1: ", bs_error_H1)) %>% 
  ggplot() + aes(x = errors, y = log_prob_H1)   + geom_point(position = position_jitter(width = 0.3), alpha = 0.5) + geom_boxplot(outlier.shape = NULL)
```



```{r}
no_error_bool <- res_turtles$backend_diagnostics$bs_error_H0 == 0 & 
  res_turtles$backend_diagnostics$bs_error_H1 == 0 &
  res_turtles$backend_diagnostics$n_divergent_H0 == 0 &
  res_turtles$backend_diagnostics$n_divergent_H1 == 0 

no_error_index <- res_turtles$backend_diagnostics$sim_id[no_error_bool]

plot_ecdf_diff(res_turtles[no_error_index], combine_variables = combine_array_elements)

t.test(bp_turtles$prob[no_error_bool], ds_turtles$variables[no_error_index,"model"])
my_reliability_diag(bp_turtles[no_error_bool,])
```



```{r ecdf-split}
stats_split <- split_SBC_results_for_bf(res_turtles)
plot_ecdf_diff(stats_split$stats_H0)
plot_ecdf_diff(stats_split$stats_H1, combine_variables = combine_array_elements)
```

Note: the error is detectable earlier with miscalibration (at around 400 sims)

## Original prior + logit link

```{r simulateds-logit}
set.seed(321452333)
ds_turtles_m1_logit <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = NULL, C = NULL, link = "logit",  future.globals = c("turtles", "r_inv_one_plus_sq")), n_sims = N_sims)

ds_turtles_m0_logit <- generate_datasets(SBC_generator_function(sim_turtles, model = 0, N = NULL, C = NULL, link = "logit", future.globals = "turtles"), n_sims = N_sims)
                                              
                                                                                      
ds_turtles_logit <- SBC_datasets_for_bf(ds_turtles_m0_logit, ds_turtles_m1_logit)
```


```{r turtles-logit}
backend_turtles_logit <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter, warmup = warmup, init = init),
  SBC_backend_rstan_sample(m_H1, iter = iter, warmup = warmup, init = init)
)
# res_turtles_logit <- compute_SBC(ds_turtles_logit, backend_turtles_logit, 
#                            keep_fits = FALSE,
#                            cache_mode = "results",
#                            cache_location = file.path(cache_dir, "turtles_1_logit.rds"))
res_turtles_logit <- compute_SBC_cache_blocks(ds_turtles_logit, backend_turtles_logit, 
                           keep_fits = FALSE,
                           block_size = 200,
                           cache_prefix = file.path(cache_dir, "turtles_logit_"))
```


```{r}
plot_ecdf_diff(res_turtles_logit, combine_variables = combine_array_elements)
plot_rank_hist(res_turtles_logit, variables = "model", bins = 20)

```

```{r}
bp_turtles_logit <- binary_probabilities_from_stats(res_turtles_logit$stats)
t.test(bp_turtles_logit$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_logit$prob, bp_turtles_logit$simulated_value)
my_reliability_diag(bp_turtles_logit)
```


```{r ecdf-split-logit}
stats_split_logit <- split_SBC_results_for_bf(res_turtles_logit)
plot_ecdf_diff(stats_split_logit$stats_H0)
plot_ecdf_diff(stats_split_logit$stats_H1, combine_variables = combine_array_elements)
```


## Chi-squared prior

```{r simulateds-chisq}
set.seed(325486524)
ds_turtles_m1_chisq <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = NULL, C = NULL, sigma2_prior = "chisq", future.globals = "turtles"), n_sims = length(ds_turtles_m0))
ds_turtles_chisq <- SBC_datasets_for_bf(ds_turtles_m0, ds_turtles_m1_chisq)
```


```{r turtles_chisq}
backend_turtles_chisq <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter, warmup = warmup, init = init),
  SBC_backend_rstan_sample(m_H1_chisq, iter = iter, warmup = warmup, init = init)
)
res_turtles_chisq <- compute_SBC(ds_turtles_chisq, backend_turtles_chisq, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, "turtles_1_chisq.rds"))
```



```{r}
plot_ecdf_diff(res_turtles_chisq, combine_variables = combine_array_elements)
plot_rank_hist(res_turtles_chisq, variables = "model", bins = 20)

```

```{r}
bp_turtles_chisq <- binary_probabilities_from_stats(res_turtles_chisq$stats)
t.test(bp_turtles_chisq$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_chisq$prob, bp_turtles_chisq$simulated_value)
my_reliability_diag(bp_turtles_chisq)
```

```{r ecdf-split-chisq}
stats_split_chisq <- split_SBC_results_for_bf(res_turtles_chisq)
plot_ecdf_diff(stats_split_chisq$stats_H0)
plot_ecdf_diff(stats_split_chisq$stats_H1, combine_variables = combine_array_elements)
```

## Normal prior

```{r simulateds-norm}
set.seed(3126854)
ds_turtles_m1_norm <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = NULL, C = NULL, sigma2_prior = "sqrt_norm", future.globals = "turtles"), n_sims = length(ds_turtles_m0)
                                        )
ds_turtles_norm <- SBC_datasets_for_bf(ds_turtles_m0, ds_turtles_m1_norm)
```


```{r turtles-normal}
backend_turtles_norm <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter, warmup = warmup, init = init),
  SBC_backend_rstan_sample(m_H1_norm, iter = iter, warmup = warmup, init = init)
)
res_turtles_norm <- compute_SBC(ds_turtles_norm, backend_turtles_norm, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, "turtles_1_norm.rds"))
```



```{r}
plot_ecdf_diff(res_turtles_norm, combine_variables = combine_array_elements)
plot_rank_hist(res_turtles_norm, variables = "model", bins = 20)

```

```{r}
bp_turtles_norm <- binary_probabilities_from_stats(res_turtles_norm$stats)
t.test(bp_turtles_norm$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_norm$prob, bp_turtles_norm$simulated_value)
my_reliability_diag(bp_turtles_norm)
```


```{r ecdf-split-norm}
stats_split_norm <- split_SBC_results_for_bf(res_turtles_norm)
plot_ecdf_diff(stats_split_norm$stats_H0)
plot_ecdf_diff(stats_split_norm$stats_H1, combine_variables = combine_array_elements)
```

```{r}
plot_sim_estimated(stats_split_norm$stats_H1 %>% filter(!is.na(simulated_value)), variables = "lp__")

stats_split_norm$stats_H1 %>% filter(variable == "lp__")
stats_split_chisq$stats_H1 %>% filter(variable == "lp__")
stats_split$stats_H1 %>% filter(variable == "lp__")
```

```{r}
ds_turtles_m1_norm$variables
```

### Check norm model 

```{r simulateds-norm2}
set.seed(4655223)
ds_turtles_m1_norm_2 <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = NULL, C = NULL, sigma2_prior = "sqrt_norm", future.globals = "turtles"), n_sims = 2000
                                        )

```


```{r turtles2-test}
backend_H1_norm = SBC_backend_rstan_sample(m_H1_norm, iter = iter, warmup = warmup, init = init)
res_turtles_m1_norm <- compute_SBC(ds_turtles_m1_norm_2, backend_H1_norm, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, "turtles_norm_test.rds"))
```


```{r}
plot_ecdf_diff(res_turtles_m1_norm, combine_variables = combine_array_elements)
```

## Normal prior + logit link

```{r simulateds-norm-logit}
set.seed(6685543)
ds_turtles_m1_norm_logit <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = NULL, C = NULL, sigma2_prior = "sqrt_norm", link = "logit",  future.globals = "turtles"), n_sims = N_sims)


                                                                                      
ds_turtles_norm_logit <- SBC_datasets_for_bf(ds_turtles_m0_logit, ds_turtles_m1_norm_logit)
```


```{r turtles-norm-logit}
backend_turtles_norm_logit <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter, warmup = warmup, init = init),
  SBC_backend_rstan_sample(m_H1_norm, iter = iter, warmup = warmup, init = init)
)
res_turtles_norm_logit <- compute_SBC(ds_turtles_norm_logit, backend_turtles_norm_logit, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, "turtles_1_norm_logit.rds"))
```

```{r}
warning("Temproary")
res_turtles_norm_logit <- get_partial_cache_blocks(ds_turtles_norm_logit, backend_turtles_norm_logit, 
                           keep_fits = FALSE,
                           cache_prefix = file.path(cache_dir, "turtles_norm_logit_"),
                           block_size = 200)
```


```{r}
plot_ecdf_diff(res_turtles_norm_logit$stats |> mutate(sim_id = 1:n()), combine_variables = combine_array_elements)
plot_rank_hist(res_turtles_norm_logit, variables = "model", bins = 20)

```

```{r}
bp_turtles_norm_logit <- binary_probabilities_from_stats(res_turtles_norm_logit$stats)
t.test(bp_turtles_norm_logit$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_norm_logit$prob, bp_turtles_norm_logit$simulated_value)
my_reliability_diag(bp_turtles_norm_logit)
```


```{r ecdf-split-norm-logit}
stats_split_norm_logit <- split_SBC_results_for_bf(res_turtles_norm_logit)
plot_ecdf_diff(stats_split_norm_logit$stats_H0)
plot_ecdf_diff(stats_split_norm_logit$stats_H1, combine_variables = combine_array_elements)
```


## Warp3



```{r warp3}
backend_turtles_w <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter, warmup = warmup, init = init),
  SBC_backend_rstan_sample(m_H1, iter = iter, warmup = warmup, init = init),
  method = "warp3", repetitions = 5
)
res_turtles_w <- compute_SBC(ds_turtles, backend_turtles_w, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           chunk_size = 30, # Hack to reduce threads usage just for Warp3
                           cache_location = file.path(cache_dir, "turtles_1_w.rds"))
```


```{r}
plot_ecdf_diff(res_turtles_w, combine_variables = combine_array_elements)
plot_binary_calibration_diff(res_turtles_w$stats)
plot_rank_hist(res_turtles_w, variables = "model", bins = 20)

```

```{r}
res_turtles_w$backend_diagnostics$prob_H1 %>% hist()
res_turtles_w$backend_diagnostics$prob_H1 %>% mean()
```


## More warmup

```{r more-warmup}
backend_turtles_more <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter + 1000, warmup = warmup + 1000, init = init),
  SBC_backend_rstan_sample(m_H1, iter = iter + 1000, warmup = warmup + 1000, init = init)
)
res_turtles_more <- compute_SBC(ds_turtles, backend_turtles_more, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, "turtles_1_more.rds"))
```


```{r}
plot_ecdf_diff(res_turtles_more, combine_variables = combine_array_elements)
plot_rank_hist(res_turtles_more, variables = "model", bins = 20)

```
```{r}
bp_turtles_more <- binary_probabilities_from_stats(res_turtles_more$stats)
t.test(bp_turtles_more$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_more$prob, bp_turtles_more$simulated_value)
my_reliability_diag(bp_turtles_more)
```

## More warmup and iterations

```{r more-warmup-iter}
backend_turtles_more2 <- SBC_backend_bridgesampling(
  SBC_backend_rstan_sample(m_H0, iter = iter * 2, warmup = warmup + 1000, init = init),
  SBC_backend_rstan_sample(m_H1, iter = iter * 4, warmup = warmup + 2000, init = init)
)
res_turtles_more2 <- compute_SBC(ds_turtles, backend_turtles_more2, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, "turtles_1_more2.rds"))
```


```{r}
plot_ecdf_diff(res_turtles_more2, combine_variables = combine_array_elements)
plot_rank_hist(res_turtles_more2, variables = "model", bins = 20)

```
```{r}
bp_turtles_more2 <- binary_probabilities_from_stats(res_turtles_more2$stats)
t.test(bp_turtles_more2$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_more2$prob, bp_turtles_more2$simulated_value)
my_reliability_diag(bp_turtles_more2)
```

```{r}
table(res_turtles_more2$backend_diagnostics$bs_error_H1)
true_model <- res_turtles_more2$stats %>% filter(variable == "model") %>% pull(simulated_value)
res_turtles_more2$backend_diagnostics %>% mutate(errors = paste0("H0: ", bs_error_H0, ", H1: ", bs_error_H1), true_model = true_model) %>% 
  ggplot() + aes(x = errors, y = log_prob_H1)  + geom_boxplot(outlier.shape = NA) + geom_point(position = position_jitter(width = 0.3), alpha = 0.5)  + facet_wrap(~true_model)
```

## Free predictors, fewer data

```{r turtles_free_fewer}
set.seed(22248348)
N_sims <- 2000
N <- 80
C <- 10
ds_turtles_m0_free_fewer <- generate_datasets(SBC_generator_function(sim_turtles, model = 0, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_m1_free_fewer <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_free_fewer <- SBC_datasets_for_bf(ds_turtles_m0_free_fewer, ds_turtles_m1_free_fewer)

res_turtles_free_fewer <- compute_SBC(ds_turtles_free_fewer, backend_turtles, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, paste0("turtles_N", N, "_C",C,"_", length(ds_turtles_free_fewer), ".rds")))

```

```{r}
res_turtles_free_fewer$backend_diagnostics$prob_H1 %>% hist() 
plot_ecdf_diff(res_turtles_free_fewer, combine_variables = combine_array_elements)
```


```{r}
bp_turtles_free_fewer <- binary_probabilities_from_stats(res_turtles_free_fewer$stats)
t.test(bp_turtles_free_fewer$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_free_fewer$prob, bp_turtles_free_fewer$simulated_value)
my_reliability_diag(bp_turtles_free_fewer)
```



## Free predictors, same data size

```{r turtles_free_same}
set.seed(86233248)
N_sims <- 2000
N <- nrow(turtles)
C <- max(turtles$clutch)
ds_turtles_m0_free_same <- generate_datasets(SBC_generator_function(sim_turtles, model = 0, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_m1_free_same <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_free_same <- SBC_datasets_for_bf(ds_turtles_m0_free_same, ds_turtles_m1_free_same)

res_turtles_free_same <- compute_SBC(ds_turtles_free_same, backend_turtles, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, paste0("turtles_N", N, "_C",C,"_", length(ds_turtles_free_same), ".rds")))

```

```{r}
res_turtles_free_same$backend_diagnostics$prob_H1 %>% hist() 
plot_ecdf_diff(res_turtles_free_same, combine_variables = combine_array_elements)
```


```{r}
bp_turtles_free_same <- binary_probabilities_from_stats(res_turtles_free_same$stats)
t.test(bp_turtles_free_same$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_free_same$prob, bp_turtles_free_same$simulated_value)
my_reliability_diag(bp_turtles_free_same)
```

Add more sims

```{r turtles_free_same2}
set.seed(4865526)
N_sims <- 2000
N <- nrow(turtles)
C <- max(turtles$clutch)
ds_turtles_m0_free_same2 <- generate_datasets(SBC_generator_function(sim_turtles, model = 0, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_m1_free_same2 <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_free_same2 <- SBC_datasets_for_bf(ds_turtles_m0_free_same2, ds_turtles_m1_free_same2)

res_turtles_free_same2 <- compute_SBC(ds_turtles_free_same2, backend_turtles, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, paste0("turtles_N", N, "_C",C,"_", length(ds_turtles_free_same2), "_2.rds")))

```

```{r}
res_turtles_free_same_all <- bind_results(res_turtles_free_same, res_turtles_free_same2)
plot_ecdf_diff(res_turtles_free_same_all, combine_variables = combine_array_elements)
```


```{r}
bp_turtles_free_same_all <- binary_probabilities_from_stats(res_turtles_free_same_all$stats)
t.test(bp_turtles_free_same_all$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_free_same_all$prob, bp_turtles_free_same_all$simulated_value)
my_reliability_diag(bp_turtles_free_same_all)
```

## Free predictors, larger dataset

```{r turtles_free_larger}
set.seed(32148553)
N_sims <- 2000
N <- 3 * nrow(turtles)
C <- 2 * max(turtles$clutch)
ds_turtles_m0_free_larger <- generate_datasets(SBC_generator_function(sim_turtles, model = 0, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_m1_free_larger <- generate_datasets(SBC_generator_function(sim_turtles, model = 1, N = N, C = C, future.globals = gen_globals), n_sims = N_sims)
ds_turtles_free_larger <- SBC_datasets_for_bf(ds_turtles_m0_free_larger, ds_turtles_m1_free_larger)

res_turtles_free_larger <- compute_SBC(ds_turtles_free_larger, backend_turtles, 
                           keep_fits = FALSE,
                           cache_mode = "results",
                           cache_location = file.path(cache_dir, paste0("turtles_N", N, "_C",C,"_", length(ds_turtles_free_larger), ".rds")))

```

```{r}
res_turtles_free_larger$backend_diagnostics$prob_H1 %>% hist() 
plot_ecdf_diff(res_turtles_free_larger, combine_variables = combine_array_elements)
```


```{r}
bp_turtles_free_larger <- binary_probabilities_from_stats(res_turtles_free_larger$stats)
t.test(bp_turtles_free_larger$prob, mu = 0.5)
miscalibration_resampling_p(bp_turtles_free_larger$prob, bp_turtles_free_larger$simulated_value)
my_reliability_diag(bp_turtles_free_larger)
```
