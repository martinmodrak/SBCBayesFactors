---
title: "Test power"
format: html
---

```{r setup}
#| include: FALSE
library(dplyr)
library(ggplot2)
library(patchwork)
library(SBC)
devtools::load_all()

cache_dir_top <- here::here("cache")
cache_dir <- file.path(cache_dir, "test_power")
if(!dir.exists(cache_dir)) {
  dir.create(cache_dir)
}

theme_set(theme_minimal())
setup_cluster()
```


```{r}
test_scenario <- function(probs, name, size) {
  rbind(
   test_DAP_power(probs, size = size, test_func_DAP_t) |> mutate(type = "t"),
   test_DAP_power(probs, size = size, test_func_DAP_bayesT) |> mutate(type = "bayesT"),
    test_DAP_power(probs, size = size, test_func_DAP_gaffke) |> mutate(type = "gaffke")
  ) |> 
    mutate(scenario = name, size = size)
}

test_all_sizes <- function(probs, name) {
  sizes <- c(10,50,100)
  sanitized_name <- gsub("[/\\.,]", "", name)
  cache_file <- file.path(cache_dir, paste0(sanitized_name, "_", rlang::hash(probs), ".rds"))
  if(file.exists(cache_file)) {
    message("Reading from cache ", cache_file)
    return(readRDS(cache_file))
  } else {
    res <- purrr::map_df(sizes, \(size) test_scenario(probs, name, size))
    saveRDS(res, cache_file)
    return(res)
  }
}
```


```{r}
res_binary_correct <- load_precomputed_file("cache/binary_correct.rds", "binary_example.qmd")
probs_binary_correct <- binary_probabilities_from_stats(res_binary_correct$result$stats)$prob
df_binary_correct <- test_all_sizes(probs_binary_correct, "Binary - correct")
df_binary_correct
```



```{r}
res_poisson_nb_correct <- load_precomputed_file("cache/poisson_nb_correct.rds", "poisson_nb_example.qmd")
probs_poisson_nb_correct <- binary_probabilities_from_stats(res_poisson_nb_correct$result$stats)$prob
df_poisson_nb_correct <- test_all_sizes(probs_poisson_nb_correct, "Poisson/NB - correct")
df_poisson_nb_correct
```


```{r}
res_poisson_nb_bias <- load_precomputed_file("cache/poisson_nb_bias.rds", "poisson_nb_example.qmd")
probs_poisson_nb_bias <- binary_probabilities_from_stats(res_poisson_nb_bias$result$stats)$prob
df_poisson_nb_bias <- test_all_sizes(probs_poisson_nb_bias, "Poisson/NB - bias")
df_poisson_nb_bias
```

```{r}
res_poisson_nb_vari <- load_precomputed_file("cache/poisson_nb_vari.rds", "poisson_nb_example.qmd")
probs_poisson_nb_vari <- binary_probabilities_from_stats(res_poisson_nb_vari$result$stats)$prob
df_poisson_nb_vari <- test_all_sizes(probs_poisson_nb_vari, "Poisson/NB - variance")
df_poisson_nb_vari
```

```{r}
res_poisson_nb_bias_vari <- load_precomputed_file("cache/poisson_nb_bias_vari.rds", "poisson_nb_example.qmd")
probs_poisson_nb_bias_vari <- binary_probabilities_from_stats(res_poisson_nb_bias_vari$result$stats)$prob
df_poisson_nb_bias_vari <- test_all_sizes(probs_poisson_nb_bias_vari, "Poisson/NB - bias_vari")
df_poisson_nb_bias_vari
```

```{r}
res_turtles <- load_precomputed_file("cache/turtles.rds", "turtles.qmd")
probs_turtles <- binary_probabilities_from_stats(res_turtles$result$stats)$prob
df_turtles <- test_all_sizes(probs_turtles, "Turtles")
df_turtles
```


```{r}
warning("Expand to full results")
res_turtles_post <- do.call(bind_results,
                            purrr::map(1:2, \(id) load_precomputed_file(paste0("cache/turtles_post_half_", id, ".rds"), "turtles_norm_bad.qmd")$result))

probs_turtles_post <- binary_probabilities_from_stats(res_turtles_post$stats)$prob
df_turtles_post <- test_all_sizes(probs_turtles_post, "Turtles - posterior SBC")
df_turtles_post
```


```{r}
warning("Expand to full results")

res_turtles_norm_bad <- do.call(bind_results,
                            purrr::map(1:3, \(id) load_precomputed_file(paste0("cache/turtles_norm_bad_", id, ".rds"), "turtles_norm_bad.qmd")$result))
probs_turtles_norm_bad <- binary_probabilities_from_stats(res_turtles_norm_bad$stats)$prob
df_turtles_norm_bad <- test_all_sizes(probs_turtles_norm_bad, "Turtles - posterior SBC")
df_turtles_norm_bad
```

```{r}
res_ranef_post <- load_precomputed_file(here::here("cache/lmbf_ranef_post_presence_100.rds"), "lmbf_ranef_presence_post_sbc.qmd")$result
probs_ranef_post <- binary_probabilities_from_stats(res_ranef_post$result$stats)$prob
df_ranef_post <- test_all_sizes(probs_ranef_post, "Ranef presence - posterior SBC")
df_ranef_post
```

```{r}
res_ranef_post_constant <- load_precomputed_file(here::here("cache/lmbf_ranef_post_presence_constant_100_7500.rds"), "lmbf_ranef_presence_post_constant_sbc.qmd")$result
probs_ranef_post_constant <- binary_probabilities_from_stats(res_ranef_post_constant$result$stats)$prob
df_ranef_post_constant <- test_all_sizes(probs_ranef_post_constant, "Ranef presence - posterior SBC")
df_ranef_post_constant
```

```{r}
warning("Expand to full results")

res_schad_fixed <- do.call(bind_results,
                           c(list(load_precomputed_file("cache/SBC_2step_fixed.rds", "schad_biased_bf_fixed.qmd")$result),
                            purrr::map(1:4, \(id) load_precomputed_file(paste0("cache/SBC_2step_fixed_more_", id, ".rds"), "schad_biased_bf_fixed.qmd")$result)))

probs_schad_fixed <- binary_probabilities_from_stats(res_schad_fixed$stats)$prob
df_schad_fixed <- test_all_sizes(probs_schad_fixed, "Ranef presence - posterior SBC")
df_schad_fixed
```



```{r}
probs <- rbeta(1000, 15, 10)
size <- 100
df_test <- 

df_test
```

```{r}
probs <- rbeta(1000, 15, 10)
test_DAP_power(probs, size = size, test_func_DAP_gaffke)
```


```{r}
probs <- rbeta(10,15,10)
rbind(
  test_func_DAP_t(probs, mu = 0.5) |> mutate(type = "t"),
  test_func_DAP_bayesT(probs, mu = 0.5) |> mutate(type = "bayesT"),
  test_func_DAP_gaffke(probs, mu = 0.5) |> mutate(type = "gaffke")
)

```



