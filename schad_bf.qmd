---
title: "Schad BF workflow examples"
format: html
---

```{r setup}
library(dplyr)
library(tidyr)
library(SBC)
library(designr)
library(brms)
devtools::load_all()

cache_dir <- here::here("cache")
if(!dir.exists(cache_dir))  {
  dir.create(cache_dir)
}

options("brms.backend" = "rstan")
rstan::rstan_options(auto_write = TRUE)

```

```{r cluster}
setup_cluster()
```


```{r}
#trace('new', tracer = quote(if(Class == "brob") { dotlist = list(...); if(!is.null(dotlist$positive) && any(is.na(dotlist$positive))) { browser() } }), print = FALSE )
#untrace('new')
trace('as.numeric', signature = "brob", tracer = quote(if(any(is.na(x@positive))) { browser()}), print = FALSE )
untrace('as.numeric', signature = "brob")

#trace('bridge_sampler', tracer = quote(if(!all(is.finite(upars))) { browser()}), print = FALSE, where = getS3method("bridge_sampler", "stanfit"))
debugonce(bridge_sampler)

trace(.stan_log_posterior, at = 4, tracer = quote(if(!is.finite(out)){browser()}))

    lml_Null1 <- bridge_sampler(brm01, silent=TRUE)
my_trace_func <- function()
trace

b_na <- new("brob", x = c(30,10,15), positive = c(NA,TRUE, NA))
as.numeric(b_na)
```

```{r}
ex <- rstan::extract(brm01$fit, permuted = FALSE)
samples <- brm01$fit

skeleton <- bridgesampling:::.create_skeleton(samples@sim$pars_oi,
                                              samples@par_dims[samples@sim$pars_oi])

upars <- apply(ex, 1:2, FUN = function(theta) {
  rstan::unconstrain_pars(samples, bridgesampling:::.rstan_relist(theta, skeleton))
})

min(upars)

lp <- apply(upars, c(2,3), \(x) { rstan::log_prob(samples, x) })
min(lp)
max(lp)
```


## Issue 2

```{r, echo=FALSE}
design <- fixed.factor("x", levels = c("-1", "1"), replications = 2) +
  random.factor("subj", instances = 15)
simdata <- design.codes(design)
simdata$x <- as.numeric(as.character(simdata$x))
simdata$simrt <- rep(1, length(simdata$x))


priors_iss2 <- c(
  set_prior("normal(6, 0.5)", class = "Intercept"),
  set_prior("normal(0, 1.0)", class = "b"),
  set_prior("normal(0, 1.5)", class = "sd"),
  set_prior("normal(0, 0.5)", class = "sigma"),
  set_prior("lkj(2)", class = "cor")
)

simulate_issue_2 <- function(model) {
  tmp <- -1
  while (tmp < 0) {
    # sample from a half-normal distribution
    tmp <- SimFromPrior(priors_iss2, class = "Intercept", coef = "")
  }
  
  beta0    <- tmp
  if (model == 0) {
    beta1    <- 0
  } else {
    beta1    <- SimFromPrior(priors_iss2, class = "b")
  }
  sigma_u0 <- SimFromPrior(priors_iss2, class = "sd")
  sigma_u1 <- SimFromPrior(priors_iss2, class = "sd")
  rho_u    <- SimFromPrior(priors_iss2, class = "cor")
  sigma    <- SimFromPrior(priors_iss2, class = "sigma")
  
  
  rtsim <- exp(
    simLMM(
      formula =  ~ x + (x | subj),
      dat = simdata,
      Fixef = c(beta0, beta1),
      VC_sd = list(c(sigma_u0, sigma_u1), sigma),
      CP = rho_u,
      verbose = FALSE,
      empirical = FALSE
    )
  )
  
  simdata$simrt <- rtsim
  
  variables = list(
    Intercept = beta0,
    sd_subj__Intercept = sigma_u0,
    sd_subj__x = sigma_u1,
    cor_subj__Intercept__x = rho_u,
    sigma = sigma
  )
  if(model == 1) {
    variables$b_x <- beta1
  }
  
  list(
    generated = simdata,
    variables = variables
  )
}

xx <- simulate_issue_2(model = 0)
xx$variables

```

```{r}
set.seed(24854652)
n_sims <- 500
ds_issue_2_H0 <- generate_datasets(SBC_generator_function(simulate_issue_2, model = 0, future.chunk.size = Inf), n_sims = n_sims)
ds_issue_2_H1 <- generate_datasets(SBC_generator_function(simulate_issue_2, model = 1, future.chunk.size = Inf), n_sims = n_sims)
```


```{r}
backend_issue_2_H0 <- SBC_backend_brms(simrt ~ 1 + (1+x|subj), 
            family=lognormal(), prior=priors_iss2[-2,], 
            save_pars = save_pars(all = TRUE),
            warmup=2000, iter=10000,
            control=list(adapt_delta=0.99, max_treedepth=15),
            template_data = simdata
            #, out_stan_file = file.path("cache/issue_2_H0.stan")
            )

res_issue_2_H0 <- compute_SBC(ds_issue_2_H0[1:10], backend_issue_2_H0,
            cache_mode = "results",
            cache_location = file.path(cache_dir, "SBC_issue_2_H0.rds"))
```


```{r}
plot_ecdf(res_issue_2_H0)
```


```{r}
backend_issue_2_H1 <- SBC_backend_brms(simrt ~ x + (1+x|subj), 
            family=lognormal(), prior=priors_iss2, 
            save_pars = save_pars(all = TRUE),
            warmup=2000, iter=10000,
            control=list(adapt_delta=0.99, max_treedepth=15),
            template_data = simdata
            #, out_stan_file = file.path("cache/issue_2_H1.stan")
            )

res_issue_2_H1 <- compute_SBC(ds_issue_2_H1[1:10], backend_issue_2_H1,
            cache_mode = "results",
            cache_location = file.path(cache_dir, "SBC_issue_2_H1.rds"))

```


```{r}
plot_ecdf(res_issue_2_H1)
```

```{r}
#help the GC
res_issue_2_H0$fits <- rep(list(NULL), length(res_issue_2_H0))
res_issue_2_H1$fits <- rep(list(NULL), length(res_issue_2_H1))
gc()
```

```{r}
set.seed(4322125)
ds_issue_2 <- SBC_datasets_for_bf(ds_issue_2_H0, ds_issue_2_H1)
backend_issue_2 <- SBC_backend_bridgesampling(backend_issue_2_H0, backend_issue_2_H1)

res_issue_2 <- compute_SBC(
  ds_issue_2, 
  backend_issue_2,
  keep_fits = FALSE,
  cache_mode = "results",
  cache_location = file.path(cache_dir, "SBC_issue_2.rds"))

```

```{r}
plot_ecdf_diff(res_issue_2)

plot_binary_calibration_diff(res_issue_2$stats)
calibrationband::calibration_bands(round(res_issue_2$backend_diagnostics$prob_H1, 8), res_issue_2$stats %>% filter(variable == "model") %>% pull(simulated_value) %>% as.logical())
```

# Issue 2 - Misspecified models

```{r}
backend_issue_2_H1_noslope <- SBC_backend_brms(simrt ~ x + (1|subj), 
            family=lognormal(), prior=priors_iss2[-5,], 
            save_pars = save_pars(all = TRUE),
            warmup=2000, iter=10000,
            control=list(adapt_delta=0.99, max_treedepth=15),
            template_data = simdata
            #, out_stan_file = file.path("cache/issue_2_H1_noslope.stan")
            )
backend_issue_2_H0_noslope <- SBC_backend_brms(simrt ~ 1 + (1|subj), 
            family=lognormal(), prior=priors_iss2[-c(2,5),], 
            save_pars = save_pars(all = TRUE),
            warmup=2000, iter=10000,
            control=list(adapt_delta=0.99, max_treedepth=15),
            template_data = simdata
            #, out_stan_file = file.path("cache/issue_2_H0_noslope.stan")
            )

backend_issue_2_noslope <- SBC_backend_bridgesampling(backend_issue_2_H0_noslope, backend_issue_2_H1_noslope)

ds_issue_2_H0_noslope <- ds_issue_2_H0
ds_issue_2_H0_noslope$variables <- posterior::subset_draws(ds_issue_2_H0$variables, variable = c("sd_subj__x", "cor_subj__Intercept__x"), exclude = TRUE)
ds_issue_2_H1_noslope <- ds_issue_2_H1
ds_issue_2_H1_noslope$variables <- posterior::subset_draws(ds_issue_2_H1$variables, variable = c("sd_subj__x", "cor_subj__Intercept__x"), exclude = TRUE)

set.seed(6985244)
ds_issue_2_noslope <- SBC_datasets_for_bf(ds_issue_2_H0_noslope, ds_issue_2_H1_noslope)

res_issue_2_noslope <- compute_SBC(
  ds_issue_2_noslope, 
  backend_issue_2_noslope,
  keep_fits = FALSE,
  cache_mode = "results",
  cache_location = file.path(cache_dir, "SBC_issue_2_noslope.rds"))

```


```{r}
plot_ecdf_diff(res_issue_2_noslope)
```

