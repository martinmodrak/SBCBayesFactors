---
title: "test_calibration"
format: html
---

```{r setup}
devtools::load_all()
```


```{r}
test_single <- function(probs_generator, bias = 0, sd = 0, func = calibration_p_saddle, ...) {
  dotlist <- list(...)
  ps <- replicate(100, {
    probs <- do.call(probs_generator, dotlist)
    if(bias != 0 || sd != 0) {
      probs_to_sim <- plogis(
        qlogis(probs) + bias + rnorm(length(probs), mean = 0, sd = sd)
        )
    } else {
      probs_to_sim <- probs
    }
    ys <- rbinom(length(probs), size = 1, prob = probs_to_sim)
    func(probs, ys)
  })
  
  return(ps)
}

func <-  miscalibration_resampling_p
ps <- test_single(runif, func = func, n = 100)
hist(ps)

ps <- test_single(\(n) rbinom(n, size = 1, prob = 0.5), func = func, n = 100)
hist(ps)


ps <- test_single(runif, func = func, n = 10000, bias = 0.5)
hist(ps)

dd <- rbeta(50, 2,1)
hoeffding_p(dd)


probs <- plogis(qlogis(runif(1000)) + 0.5)
hoeffding_p(probs)

ps <- test_single(\(n) rbinom(n, size = 1, prob = 0.4) * 0.3 + 0.2, func = func, n = 1000)
hist(ps)

```


# DAP tests

```{r}
test_DAP_single <- function(probs_generator, bias = 0, sd = 0, func = calibration_p_saddle, ...) {
  dotlist <- list(...)
  ps <- replicate(100, {
    probs <- do.call(probs_generator, dotlist)
    if(bias != 0 || sd != 0) {
      probs <- plogis(
        qlogis(probs) + bias + rnorm(length(probs), mean = 0, sd = sd)
        )
    } 
    func(probs)
  })
  
  return(ps)
}


func <- bentkus_p

t_test_p <- function(probs) {
  t <- t.test(probs, mu = 0.5)
  return(t$p.value)
}

ps <- test_DAP_single(rbeta, shape1 = 2, shape2 = 1, n = 20, func = bentkus_p)
#hist(ps)
mean(ps < 0.05)
ps <- test_DAP_single(rbeta, shape1 = 2, shape2 = 1, n = 20, func = hoeffding_p)
#hist(ps)
mean(ps < 0.05)
ps <- test_DAP_single(rbeta, shape1 = 2, shape2 = 1, n = 20, func = t_test_p)
#hist(ps)
mean(ps < 0.05)

ps <- test_DAP_single(runif, n = 10, func = ml_dap_p)
hist(ps)

ps <- test_DAP_single(runif, n = 100, func = ml_dap_p)
hist(ps)

ps <- test_DAP_single(runif, n = 1000, func = ml_dap_p)
hist(ps)


ps <- test_DAP_single(\() rbinom(n = 100000, size = 1, prob = 0.5) * 0.5 + 0.25, func = t_test_p)
hist(ps)

ps <- test_DAP_single(\() rbinom(n = 100, size = 1, prob = 0.5) * 0.5 + 0.25, func = ml_dap_p)
hist(ps)


```

```{r}
n <- 1000
#gen <- \() ifelse(runif(n = n) <= 0.5, 0.495, 0.505)
mu_beta <- 0.51
prec_beta <- 4
gen <- \() rbeta(n = n, shape1 = mu_beta * prec_beta, shape2 = (1 - mu_beta)*prec_beta)
ps <- test_DAP_single(gen, func = hoeffding_p)
mean(ps < 0.05)
ps <- test_DAP_single(gen, func = bentkus_p)
mean(ps < 0.05)
ps <- test_DAP_single(gen, func = ml_dap_p)
mean(ps < 0.05)
ps <- test_DAP_single(gen, func = t_test_p)
mean(ps < 0.05)
```


```{r}
func <- hoeffding_p

ps <- test_DAP_single(runif, n = 100000, func = hoeffding_p)
hist(ps)

ps <- test_DAP_single(\() rbinom(n = 100000, size = 1, prob = 0.5) * 0.5 + 0.25, func = hoeffding_p)
hist(ps)

```

```{r}
ps <- numeric(10)
ps[1] <- 1/10
single_samp <- function(){
}
```

